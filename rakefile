require 'fileutils'
require 'logger'
# require 'rake/clean'

log = Logger.new(STDOUT)
log.formatter = proc do |severity, datetime, progname, msg|
    "#{severity} - [#{datetime}] - #{msg}\n"
end

PROG_NAME = 'DMR11'

SLN_PATH = File.join(File.dirname(__FILE__), '/DMR11.sln')

HOSTS_DIR = File.join(File.dirname(__FILE__), '../hosts')
HOSTS_GEN_DIR = File.join(HOSTS_DIR, 'general')
LICENSE_DIR = File.join(File.dirname(__FILE__), '/licenses')
RELEASE_BIN_DIR = File.join(File.dirname(__FILE__), '/DMR11/bin/Release')

DEPLOY_DIR = File.join(File.dirname(__FILE__), '../releases')

OUTPUT_DIR = File.join(DEPLOY_DIR, PROG_NAME)
HOSTS_OUTPUT_DIR = File.join(OUTPUT_DIR, 'hosts')
LIB_OUTPUT_DIR = File.join(OUTPUT_DIR, 'lib')
LICENSE_OUTPUT_DIR = File.join(OUTPUT_DIR, 'licenses')
USER_OUTPUT_DIR = File.join(OUTPUT_DIR, 'user')

# External
MSBUILD_PATH = 'c:/windows/microsoft.net/framework64/v4.0.30319/msbuild.exe'
SEVEN_7ZIP_PATH = 'd:/program files/7-zip/7z.exe'

log.info(RELEASE_BIN_DIR)

task :default => [
    :cleanup,
    :setup,
    :build,
    :gather_bin,
    :gather_hosts,
    :gather_licenses,
    :post_gather,
    :build_zip,
    :build_7zip,
    :cleanup
]

# Todo: Call :cleanup at the end.

# Recursively deletes the files from the previous setup.
task :cleanup do
    log.info 'Entering cleanup task.'

    if Dir.exist? OUTPUT_DIR
        log.info 'Output directory exists, cleaning…'

        FileUtils.remove_dir OUTPUT_DIR, true
    else
        log.info 'Output directory doesn\'t exist. Skipping…'
    end
end

# Creates the release directory structure.
task :setup do
    log.info 'Entering "Setup" task'

    if !Dir.exist? DEPLOY_DIR
        log.info 'Creating release deployment directory.'
        Dir.mkdir DEPLOY_DIR
    end

    [
        OUTPUT_DIR,
        HOSTS_OUTPUT_DIR,
        LIB_OUTPUT_DIR,
        LICENSE_OUTPUT_DIR,
        USER_OUTPUT_DIR
    ].each do |directory|
        if !Dir.exist? directory
            log.info "Creating #{directory}"
            Dir.mkdir directory
        else
            log.info "Skipping existing directory: #{directory}"
        end
    end
end

task :build do
    log.info 'Entering "build" task'

    if File.exist? MSBUILD_PATH
        log.info 'Found MSBuild' 
    else
        # Throw
    end
    
    if File.exist? SLN_PATH
        log.info 'Found solution'
    else
        # Throw
    end

    config = 'Release'
    command = "\"#{SLN_PATH}\" /t:Build /p:Configuration=#{config}"
    
    log.info "Changing directory to #{File.dirname(__FILE__)}"
    Dir.chdir(File.dirname(__FILE__)) do
        system MSBUILD_PATH + ' ' + command
    end
end

task :gather_bin do
    log.info 'Entering "Gather Binaries" task.'

    Dir.chdir RELEASE_BIN_DIR do
        lib = Rake::FileList.new '*.dll'
        lib.each do |f|
            FileUtils.cp(f, LIB_OUTPUT_DIR)
        end

        mainFiles = Rake::FileList.new(
            "#{PROG_NAME}.exe",
            "#{PROG_NAME}.exe.config"
        )

        mainFiles.each do |f|
            log.info "Copying \"#{f}\" to output…"
            FileUtils.cp(f, OUTPUT_DIR)
        end
    end
end

# Gathers the host files.
task :gather_hosts do
    log.info 'Entering "Gather Hosts" task'
        
    hosts = Rake::FileList.new(HOSTS_GEN_DIR + '/*/*.ini')
    hosts.each do |f|
        # Todo: Check for NOT_PRODUCTION file to prevent adding to
        # release build.

        host_dir = File.dirname(f)
        log.info "Copying \"#{host_dir}\"…"

        FileUtils.copy_entry(
            host_dir,
            File.join(HOSTS_OUTPUT_DIR, File.basename(host_dir))
        )

    end
end

task :gather_licenses do
    log.info 'Entering "Gather Licenses" task.'
    log.info "License output directory: #{LICENSE_OUTPUT_DIR}"
    licenses = Rake::FileList.new File.join(LICENSE_DIR, '*-License.txt')

    licenses.each do |license|
        log.info "Copying \"#{license}\" to output…"
        FileUtils.copy(
            license,
            LICENSE_OUTPUT_DIR
        )
    end
end

# Hides the executable's config file.
task :post_gather do
    log.info 'Entering "Post Gather" task.'
    config_path = File.join(OUTPUT_DIR, PROG_NAME + '.exe.config')

    if File.exist? config_path
        system "attrib +h \"#{config_path}\""
    else
        log.error "Can't find config file at \"#{config_path}\""
    end
end

task :build_zip do
    log.info 'Entering "Build Zip Archive" task.'
    build_archive 'zip'
end

task :build_7zip do
    log.info 'Entering "Build 7-Zip Archive" task.'
    build_archive '7z'
end

task :query do
    ruby 'Rake/QueryFileVersion.rb'
end

# Todo: Refactor 'gather_hosts'.
# Copies the host files to the specified directory.

def refresh_hosts(build_type)
    if build_type == :release

    elsif build_type == :debug

    end
end

def build_archive(extension)
    # Todo: Get assembly version.
    version = '0.8.0'
    output_archive = "#{OUTPUT_DIR}-#{version}.#{extension}"

    system "\"#{SEVEN_7ZIP_PATH}\" a \"#{output_archive}\" \"#{OUTPUT_DIR}\""
end
